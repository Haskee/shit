//главный узел + добавление узлов
//и их проверка левый меньше, правый больше
public class BinaryTree {

    Node root;

    public void addNode(int key){

        Node newNode = new Node(key);

        if(root == null){
            root = newNode;

        } else{

            Node focusNode = root;
            Node parent;

            while(true){
                parent = focusNode;

                if(key < focusNode.key){
                    focusNode = focusNode.leftChild;

                    if(focusNode == null){
                        parent.leftChild = newNode;
                        return;
                    }


                } else {
                    focusNode = focusNode.rightChild;

                    if(focusNode == null){
                        parent.rightChild = newNode;
                        return;
                    }
                }
            }

        }
    }
    //IN ORDER
    public void inOderTraverseTree(Node focusNode){

        if(focusNode != null){
            inOderTraverseTree(focusNode.leftChild);
            System.out.println(focusNode);
            inOderTraverseTree(focusNode.rightChild);

        }

    }

    //PRE ORDER
    public void preOderTraverseTree(Node focusNode){

        if(focusNode != null){
            System.out.println(focusNode);
            preOderTraverseTree(focusNode.leftChild);
            preOderTraverseTree(focusNode.rightChild);

        }

    }

    //POST ORDER
    public void postOderTraverseTree(Node focusNode){

        if(focusNode != null){
            postOderTraverseTree(focusNode.leftChild);
            postOderTraverseTree(focusNode.rightChild);
            System.out.println(focusNode);

        }

    }
    //поиск нужного узла
    public Node findNode(int key){

        Node focusNode = root;

        while(focusNode.key != key){

            if(key < focusNode.key){
                focusNode = focusNode.leftChild;

            } else {
                focusNode = focusNode.rightChild;

            }

            if(focusNode == null)
                return null;

        }

        return focusNode;

    }
    //ПЕРЕМЕЩЕНИЕ
    public boolean remove(int key){

        Node focusNode = root;
        Node parent = root;

        boolean isItALeftChild = true;

        while(focusNode.key != key){
            parent = focusNode;

            if(key < focusNode.key){
                isItALeftChild = true;
                focusNode = focusNode.leftChild;

            } else {
                isItALeftChild = false;
                focusNode = focusNode.rightChild;

            }

            if(focusNode == null)
                return false;
        }

        if(focusNode.leftChild == null && focusNode.rightChild == null){

            if(focusNode == root){
                root = null;
            } else if(isItALeftChild){
                parent.leftChild = null;

            } else {
                parent.rightChild = null;

            }
        }


        else if(focusNode.rightChild == null){

            if(focusNode == root)
                root = focusNode.leftChild;

            else if(isItALeftChild)
                parent.leftChild = focusNode.leftChild;

            else parent.rightChild = focusNode.leftChild;

        }

        else if(focusNode.leftChild == null){

            if(focusNode == root)
                root = focusNode.rightChild;

            else if(isItALeftChild)
                parent.leftChild = focusNode.rightChild;

            else parent.rightChild = focusNode.leftChild;
        }

        else{

            Node replacement = getReplacementNode(focusNode);

            if(focusNode == root)
                root = replacement;

            else if(isItALeftChild)
                parent.leftChild = replacement;

            else
                parent.rightChild = replacement;
            replacement.leftChild = focusNode.leftChild;

        }

        return true;
    }

    public Node getReplacementNode(Node replacedNode){

        Node replacementParent = replacedNode;
        Node replacement = replacedNode;

        Node focusNode = replacedNode.rightChild;

        while(focusNode != null){
            replacementParent = replacement;
            replacement = focusNode;
            focusNode = focusNode.leftChild;

        }

        if(replacement  !=  replacedNode.rightChild){
            replacementParent.leftChild = replacement.rightChild;
            replacement.rightChild = replacedNode.rightChild;
        }

        return replacement;

    }

    public static void main(String[] args){

        BinaryTree theTree = new BinaryTree();

        theTree.addNode(50);
        theTree.addNode(25);
        theTree.addNode(15);
        theTree.addNode(30);
        theTree.addNode(75);
        theTree.addNode(85);

        //System.out.println("Remove key 25");

        //theTree.remove(25);

        theTree.preOderTraverseTree(theTree.root);

        //theTree.inOderTraverseTree(theTree.root);

        //theTree.postOderTraverseTree(theTree.root);

        //System.out.println("Search for 30");
        //System.out.println(theTree.findNode(30));

    }
}

class Node {

    int key;

    Node leftChild;
    Node rightChild;

    Node(int key){

        this.key = key;

    }

    public String toString(){
        return  " key " + key;
    }
}
